{"version":3,"sources":["../../src/pages/grocery-list/grocery-list.module.ts","../../src/pages/grocery-list/grocery-list.ts"],"names":[],"mappings":"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","file":"5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { GroceryListPage } from './grocery-list';\n\n@NgModule({\n    declarations: [\n        GroceryListPage,\n    ],\n    imports: [\n        IonicPageModule.forChild(GroceryListPage),\n    ],\n    exports: [\n        GroceryListPage\n    ]\n})\nexport class GroceryListPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/grocery-list/grocery-list.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavParams, ModalController, ItemSliding, ToastController } from 'ionic-angular';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\n\nimport { ListService } from '../../providers/list-service';\nimport { ListItemService } from '../../providers/list-item-service';\nimport { List, ListItem } from '../../models/models';\n\n@IonicPage()\n@Component({\n    selector: 'grosh-grocery-list-page',\n    templateUrl: 'grocery-list.html',\n})\nexport class GroceryListPage {\n    public list: List;\n    public listItems$: Observable<ListItem[]>;\n    public listItemsByCategory$: Observable<any[]>;\n    public isListItemsLoading: boolean;\n    public hasCompletedItems$: Observable<boolean>;\n\n    constructor(\n        public navParams: NavParams,\n        public listSvc: ListService,\n        public itemSvc: ListItemService,\n        public modalCtrl: ModalController,\n        public toastCtrl: ToastController,\n    ) {\n        listSvc.getListById(navParams.get('listId'))\n            .subscribe(list => {\n                this.list = list;\n            });\n\n        this.isListItemsLoading = true;\n        this.listItems$ = itemSvc.getAllListItemsForList(navParams.get('listId'));\n        this.listItemsByCategory$ = this.listItems$\n            .map((listItems: ListItem[]) => {\n                return listItems.reduce((acc, listItem: ListItem) => {\n                    //ignore this item if the name somehow got erased or if the quantity somehow got set to 0\n                    if (!listItem.itemName || !listItem.quantity) {\n                        return acc;\n                    }\n                    \n                    if (acc.find(cat => cat.name == listItem.categoryName) === undefined) {\n                        acc.push({\n                            name: listItem.categoryName,\n                            items: []\n                        });\n                    }\n                    acc.find(cat => cat.name == listItem.categoryName).items.push(listItem);\n                    return acc;\n                }, [])\n                .sort((a, b) => {\n                    if (a.name == null) return 1;\n                    if (b.name == null) return -1;\n                    else {\n                        return a.name.localeCompare(b.name);\n                    }\n                })\n            })\n            .do(() => {\n                this.isListItemsLoading = false;\n            })\n\n        this.hasCompletedItems$ = this.listItems$\n            .map((listItems: ListItem[]) => {\n                const completedItem = listItems.find((listItem: ListItem) => listItem.isCompleted);\n                return completedItem != null;\n            })\n    }\n\n    createAndAddListItem() {\n        let modal = this.modalCtrl.create('AddListItemModal', {listId: this.list.$key});\n        modal.present();\n    }\n\n    checkCompletedSwipe(event, listItemId) {\n        const slidePercent = event.getSlidingPercent()\n        if (slidePercent < 0) {\n            if (slidePercent < -2) {\n                this.completeItem(listItemId);\n            } else {\n                console.dir(event);\n            }\n        }\n    }\n\n    completeItem(listItemId: string) {\n        this.itemSvc.updateListItemCompleted(listItemId)\n            .subscribe(() => {\n                console.log('Item completed: ', listItemId);\n            })\n    }\n\n    editItem(listItemId: string, itemElem?: ItemSliding) {\n        if (!!itemElem) {\n            itemElem.close();\n        }\n        this.presentEditModal(listItemId);\n    }\n\n    presentEditModal(listItemId: string) {\n        let modal = this.modalCtrl.create('EditListItemModal', { listItemId: listItemId, sourceListId: this.list.$key });\n        modal.onDidDismiss(this.handleEditCallback.bind(this));\n        modal.present();\n    }\n\n    handleEditCallback (data: {editedItem: ListItem, transferListId?: string}) {\n        if (!!data && !!data.transferListId) {\n            //get new list name\n            this.listSvc.getListById(data.transferListId)\n                .subscribe((newList: List) => {\n                    //create toast\n                    const toastMsg = `Item '${data.editedItem.itemName}' moved to list '${newList.name}'`;\n                    const movedToast = this.toastCtrl.create({\n                        message: toastMsg,\n                        duration: 3000,\n                        position: 'top'\n                    })\n                    //present\n                    movedToast.present();\n                })\n        }       \n    }\n\n    deleteItem(listItemId: string, itemElem?: ItemSliding) {\n        if(!!itemElem) {\n            itemElem.close();\n        }\n        this.itemSvc.deleteListItem(this.list.$key, listItemId);\n    }\n\n    deleteCompletedItems() {\n        if (!!this.list) {\n            this.itemSvc.getAllListItemsForList(this.list.$key)\n                .first()\n                .do((listItems: ListItem[]) => {\n                    const completedItems: ListItem[] = listItems.filter((item: ListItem) => item.isCompleted);\n                    for (let completedItem of completedItems) {\n                        this.deleteItem(completedItem.$key);\n                    }\n                })\n                .subscribe();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/grocery-list/grocery-list.ts"],"sourceRoot":""}